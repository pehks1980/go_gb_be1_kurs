#The .golangci.yml file is applied locally
#and also on the GitHub runner during the execution of the golangci-lint tool.
#Specifically, it is applied at the point where the golangci-lint command is executed.
# The linter reads this configuration file to determine which linters to enable,
#their settings, and how to report issues.
# настройки запуска
run:
# значение конкурентности устанавливаем по количеству CPU
  concurrency: 4
# анализ не должен превышать
  timeout: 3m
# выводить "exit-code" при наличии хотя бы одного сообщения
  issues-exit-code: 1
# не включать анализ тестов
  tests: false
# Пропускать папки вендора, сторонних зависимостей и т.д.
# vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  issues.exclude-dirs-use-default: true
# список линтеров golangci-lint tool
linters:
  disable-all: true
  enable:
  - gofmt # форматирование кода (пробелы, отступы, скобки)
  - goimports # обновление списка imports
  - govet # общий анализ возможных багов
  # - goconst # нахождение строк, которые следует вынести в константы - funlen # детектирование слишком крупных функций
  - bodyclose # проверка на незакрытые body после чтения тела ответа
  - errcheck # проверка на обработку всех ошибок
  - copyloopvar # детектирование экспорта указателя на переменную внутри цикла
# настройки отдельных линтеров
linters-settings:
  goimports:
    # указываем префикс локальных импортов, они будут группироваться
    local-prefixes: path/to/module
  govet:
    # проверка на использование переменных «в тени»
    shadow: true
  goconst:
  # goconst находит строки не меньше 2 символов, которые встречаются хотя бы 2 раза
    min-len: 2
    min-occurrences: 2
  funlen:
    # функция помечается длинной если она больше 100 строк кода либо больше 50 операций
    lines: 100
    statements: 50
    #disable them
  deadcode:
    enabled: false
  exportloopref:
    enabled: false
